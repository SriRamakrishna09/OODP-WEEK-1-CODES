1. Overloading << for Complex Class 
#include <iostream> 
using namespace std; 
class Complex { 
int real, imag; 
public: 
Complex(int r, int i) : real(r), imag(i) {} 
friend ostream& operator<<(ostream& out, const Complex& c) { 
return out << c.real << " + " << c.imag << "i"; 
} 
}; 
int main() { 
Complex c1(3, 4); 
cout << c1 << endl;  // Output: 3 + 4i 
return 0; 
} 



2. Ticket Booking & Cancellation 
#include <iostream> 
using namespace std; 
class Ticket { 
int id; 
bool booked = false; 
public: 
Ticket(int i) : id(i) {} 
void book() { cout << "Ticket " << id << (booked ? " already booked!\n" : " booked.\n"), 
booked = true; } 
void cancel() { cout << "Ticket " << id << (booked ? " canceled.\n" : " not booked yet!\n"), 
booked = false; } 
}; 
int main() { 
Ticket t1(101), t2(102); 
t1.book(); t2.book(); t2.cancel();
